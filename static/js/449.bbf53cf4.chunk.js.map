{"version":3,"file":"static/js/449.bbf53cf4.chunk.js","mappings":"gOAIe,SAASA,EAAUC,GAChC,OAAOC,EAAAA,EAAAA,IACA,sCAADC,OACoCF,EAAQ,qBAAAE,OALpC,qCAOXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,IAAI,GACnC,C,2ECRaC,E,OAAgBC,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qJ,mBC+DvC,EApDa,WACX,IAAAC,GAAwBC,EAAAA,EAAAA,YAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACZI,GAAaC,EAAAA,EAAAA,MAAbD,SACTE,GAA0CP,EAAAA,EAAAA,WAAS,GAAMQ,GAAAN,EAAAA,EAAAA,GAAAK,EAAA,GAAlDE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAiBrC,OAfAG,EAAAA,EAAAA,YAAU,WACuB,SAAAC,IAS9B,OAT8BA,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAA/B,SAAAC,IAAA,IAAAtB,EAAA,OAAAoB,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAE4B,OAF5BF,EAAAC,KAAA,EAEKT,GAAiB,GAAMQ,EAAAE,KAAA,EACJhC,EAAUiB,GAAU,KAAD,EAAhCX,EAAIwB,EAAAG,KACVjB,EAAQV,EAAKS,MACbO,GAAiB,GAAOQ,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAI,GAAAJ,EAAA,SAEzBK,QAAQC,IAAGN,EAAAI,IAAO,yBAAAJ,EAAAO,OAAA,GAAAT,EAAA,mBAErBU,MAAA,KAAAC,UAAA,EAVc,WACgBf,EAAAc,MAAC,KAADC,UAAA,CAU/BC,EACF,GAAG,CAACvB,IAGiB,KAAb,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAM0B,SACDC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SAAE,WAKTC,EAAAA,EAAAA,MAACtC,EAAa,CAAAqC,SAAA,CACXvB,IAAiBqB,EAAAA,EAAAA,KAACI,EAAAA,EAAc,IAC5B,OAAJ/B,QAAI,IAAJA,OAAI,EAAJA,EAAMgC,KAAI,SAACC,EAAWC,GACrB,OACEJ,EAAAA,EAAAA,MAACK,EAAAA,EAAI,CAAaC,GAAI,CAAEC,SAAU,KAAMR,SAAA,EACtCF,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CACRC,UAAU,MACVC,MAAM,OACNC,MAAO,kCAAoCR,EAAUS,aACrDC,IAAI,MAENb,EAAAA,EAAAA,MAACc,EAAAA,EAAW,CAAAf,SAAA,EACVF,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,CAACC,cAAY,EAACC,QAAQ,KAAKR,UAAU,MAAKV,SAClDI,EAAUe,QAEblB,EAAAA,EAAAA,MAACe,EAAAA,EAAU,CAACE,QAAQ,QAAQE,MAAM,iBAAgBpB,SAAA,CAAC,cACrCI,EAAUA,kBAZjBC,EAiBf,MAGN,C","sources":["fetches/fetchCast.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '3e1aa277fd6b8a3cd0a3e29dfce20a5c';\n\nexport default function fetchCast(movie_id) {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${movie_id}/credits?api_key=${API_KEY}`\n    )\n    .then(response => response.data);\n}\n","import styled from \"@emotion/styled\";\n\nexport const FlexContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 10px;\n  & div {\n\n    width: calc((100% - 10px * 4) / 5);\n  }\n`;","import fetchCast from 'fetches/fetchCast';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  Card,\n  Typography,\n  CardContent,\n  CardMedia,\n} from '@mui/material';\n\nimport { FlexContainer } from './Cast.styled';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nconst Cast = () => {\n  const [cast, setCast] = useState();\n  const { moviesId } = useParams();\n const [isLoaderShown, setIsLoaderShown] = useState(false);\n\n  useEffect(() => {\n    async function fetchCastDetails() {\n      try {\n         setIsLoaderShown(true);\n         const data = await fetchCast(moviesId);\n         setCast(data.cast);\n         setIsLoaderShown(false);\n      } catch (error) {\n        console.log(error)\n      }\n    }\n    fetchCastDetails();\n  }, [moviesId]);\n\n\n  if (cast?.length === 0) {\n    return <>Sorry</>\n  }\n\n  \n  return (\n    <FlexContainer>\n      {isLoaderShown && <LinearProgress />}\n      {cast?.map((character, index) => {\n        return (\n          <Card key={index} sx={{ maxWidth: 200 }}>\n            <CardMedia\n              component=\"img\"\n              width=\"3500\"\n              image={'https://image.tmdb.org/t/p/w400' + character.profile_path}\n              alt=\"\"\n            />\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"div\">\n                {character.name}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Character: {character.character}\n              </Typography>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </FlexContainer>\n  );\n};\n\nexport default Cast;\n"],"names":["fetchCast","movie_id","axios","concat","then","response","data","FlexContainer","styled","_templateObject","_taggedTemplateLiteral","_useState","useState","_useState2","_slicedToArray","cast","setCast","moviesId","useParams","_useState3","_useState4","isLoaderShown","setIsLoaderShown","useEffect","_fetchCastDetails","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","sent","t0","console","log","stop","apply","arguments","fetchCastDetails","length","_jsx","_Fragment","children","_jsxs","LinearProgress","map","character","index","Card","sx","maxWidth","CardMedia","component","width","image","profile_path","alt","CardContent","Typography","gutterBottom","variant","name","color"],"sourceRoot":""}