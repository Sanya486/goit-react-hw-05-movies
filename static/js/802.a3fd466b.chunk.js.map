{"version":3,"file":"static/js/802.a3fd466b.chunk.js","mappings":"oPAIe,SAASA,EAAaC,GACnC,OAAOC,EAAAA,EAAAA,IACA,sCAADC,OACoCF,EAAQ,qBAAAE,OALpC,qCAOXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,IAAI,GACnC,C,uBCoCA,EAxCgB,WACd,IAAAC,GAA8BC,EAAAA,EAAAA,YAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAClBI,GAAaC,EAAAA,EAAAA,MAAbD,SACNE,GAA0CP,EAAAA,EAAAA,WAAS,GAAMQ,GAAAN,EAAAA,EAAAA,GAAAK,EAAA,GAAlDE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAiBxC,OAdAG,EAAAA,EAAAA,YAAU,WACuB,SAAAC,IAS9B,OAT8BA,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAA/B,SAAAC,IAAA,IAAAlB,EAAA,OAAAgB,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAE2B,OAF3BF,EAAAC,KAAA,EAEIT,GAAiB,GAAMQ,EAAAE,KAAA,EACJ5B,EAAaa,GAAU,KAAD,EAAnCP,EAAIoB,EAAAG,KACVjB,EAAWN,EAAKwB,SAChBZ,GAAiB,GAAOQ,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAExBM,QAAQC,IAAGP,EAAAK,IAAO,yBAAAL,EAAAQ,OAAA,GAAAV,EAAA,mBAErBW,MAAA,KAAAC,UAAA,EAVc,WACgBhB,EAAAe,MAAC,KAADC,UAAA,CAU/BC,EACF,GAAG,CAACxB,IAEoB,KAAb,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAAS2B,SACJC,EAAAA,EAAAA,KAAA,KAAAC,SAAG,8CAGVC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAF,SAAA,CACGvB,IAAiBsB,EAAAA,EAAAA,KAACI,EAAAA,EAAc,KACjCJ,EAAAA,EAAAA,KAAA,MAAAC,SACU,OAAP7B,QAAO,IAAPA,OAAO,EAAPA,EAASiC,KAAI,SAACC,EAAQC,GACrB,OACEL,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,WAASK,EAAOE,WACpBR,EAAAA,EAAAA,KAAA,KAAAC,SAAIK,EAAOG,YAFJF,EAKb,QAIR,C","sources":["fetches/fetchReviews.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '3e1aa277fd6b8a3cd0a3e29dfce20a5c';\n\nexport default function fetchReviews(movie_id) {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${movie_id}/reviews?api_key=${API_KEY}`\n    )\n    .then(response => response.data);\n}\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport fetchReviews from 'fetches/fetchReviews';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState();\n  const { moviesId } = useParams();\n    const [isLoaderShown, setIsLoaderShown] = useState(false);\n\n\n  useEffect(() => {\n    async function fetchReviewsList() {\n      try {\n        setIsLoaderShown(true);\n        const data = await fetchReviews(moviesId);\n        setReviews(data.results);\n        setIsLoaderShown(false);\n      } catch (error) {\n        console.log(error)\n      }\n    }\n    fetchReviewsList();\n  }, [moviesId]);\n\n  if (reviews?.length === 0) {\n    return <p>We don`t have any reviews for this movie</p>;\n  }\n  return (\n    <>\n      {isLoaderShown && <LinearProgress />}\n      <ul>\n        {reviews?.map((review, index) => {\n          return (\n            <li key={index}>\n              <h3>Author: {review.author}</h3>\n              <p>{review.content}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["fetchReviews","movie_id","axios","concat","then","response","data","_useState","useState","_useState2","_slicedToArray","reviews","setReviews","moviesId","useParams","_useState3","_useState4","isLoaderShown","setIsLoaderShown","useEffect","_fetchReviewsList","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","sent","results","t0","console","log","stop","apply","arguments","fetchReviewsList","length","_jsx","children","_jsxs","_Fragment","LinearProgress","map","review","index","author","content"],"sourceRoot":""}